#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <time.h>
#include <string.h>
#include <locale.h>
#include <limits.h>
#include <assert.h>
 char volatile line[6];
 char alpha[26] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 sem_t sem[4];
 sem_t run[4];

printf("branch of branc")
 
 int pthread_create(pthread_t *thread,
 const pthread_attr_t *attr,
 void *(*start_routine)(void*), void *arg);
 
 void *mythread(void *arg) {
          int j = (long long int) (arg);
          while(1){
                  for(int i = 0; i < 26; i++){
                          line[j] = alpha[i];
                          sem_wait(&run[j]);
                  }
          }
          return NULL;
  }
 
 int main(){
          memset((char*)line,'-',sizeof((char*)line));
          line[5]=0;
          for(int i = 0;  i < 5; i++)
          {
                  sem_init(&run[i], 0, 0);
          }
          pthread_t p1, p2, p3, p4, p5;
          pthread_create(&p1, NULL, mythread,(void *)0);
          pthread_create(&p2, NULL, mythread,(void *)1);
          pthread_create(&p3, NULL, mythread,(void *)2);
          pthread_create(&p4, NULL, mythread,(void *)3);
          pthread_create(&p5, NULL, mythread,(void *)4);
          for(int i = 0; i<=10; i++)
          {
                  printf("%4.4d:  %s\n",i,line);
                  for(int k = 0; k < 5; k++){
                          sem_post(&run[k]);
            }
                  sleep(1);
          }
          printf("...DONE!...\n");
          return 0;
  }

